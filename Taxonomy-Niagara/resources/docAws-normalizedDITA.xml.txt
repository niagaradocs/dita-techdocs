<?xml version="1.0" encoding="UTF-8"?>
<normalized><bookmap class="- map/map bookmap/bookmap " id="index" outputclass="hide" xml:lang="en"><booktitle class="- topic/title bookmap/booktitle "><mainbooktitle class="- topic/ph bookmap/mainbooktitle "><ph class="- topic/ph ">Niagara AWS Utils Guide</ph></mainbooktitle></booktitle><bookmeta class="- map/topicmeta bookmap/bookmeta "><?Pub Dtl?><publisherinformation class="- topic/publisher bookmap/publisherinformation "><published class="- topic/data bookmap/published "><completed class="- topic/ph bookmap/completed "><day class="- topic/ph bookmap/day ">3</day><month class="- topic/ph bookmap/month ">March</month><year class="- topic/ph bookmap/year ">2023</year></completed></published></publisherinformation><critdates class="- topic/critdates "><revised class="- topic/revised " golive="March 3, 2023" modified="March 3, 2023"/></critdates><category class="- topic/category ">Software and Applications<keyword class="- topic/keyword ">prod-niagara-40</keyword></category><category class="- topic/category ">Access<keyword class="- topic/keyword ">Public</keyword></category><othermeta class="- topic/othermeta " content="docAwsUtils" name="bundle"/><bookid class="- topic/data bookmap/bookid "><bookpartno class="- topic/data bookmap/bookpartno "><keyword class="- topic/keyword "/></bookpartno></bookid></bookmeta><frontmatter class="- map/topicref bookmap/frontmatter "><topicgroup class="+ map/topicref mapgroup-d/mapref " display-name="Tridium Key Definitions" file-id="38fadf80-bc8d-11ee-aeb9-0242b099534f" format="ditamap" href="/db/organizations/tridium/repositories/master/content/documents/dita-niagara/keydef/TridiumKeydefMap_0000040079.ditamap" navtitle="Tridium Key Definitions" processing-role="resource-only" scope="local"><title class="- topic/title ">Tridium Key Definitions</title><keydef class="+ map/topicref mapgroup-d/keydef " clean-name="wh-software-and-product-variables--tridium" display-name="WH: Software and Product variables — Tridium" file-id="c4a93350-c468-11ee-be84-42010af00059" format="dita" href="#WHSoftwareVariablesTridium-9A3264AE--en" keys="wh_variables_n4" navtitle="WH: Software and Product variables — Tridium" processing-role="resource-only" scope="local"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">WH: Software and Product variables — Tridium</navtitle></topicmeta></keydef><?Pub Caret -2?><keydef class="+ map/topicref mapgroup-d/keydef " clean-name="wh-hardware-variables---tridium" display-name="WH: Hardware variables - Tridium" file-id="b44f41c0-c468-11ee-be84-42010af00059" format="dita" href="#WHHardwareVariables-Tridium-9A32E735--en" keys="host_models" navtitle="WH: Hardware variables-Tridium" processing-role="resource-only" scope="local"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">WH: Hardware variables - Tridium</navtitle></topicmeta></keydef><keydef class="+ map/topicref mapgroup-d/keydef " clean-name="wh-core-software-document-titles-tridium" display-name="WH: Core Software Document Titles-TRIDIUM" file-id="9ff4bad0-c76e-11ee-be84-42010af00059" format="dita" href="#WHCoreSoftwareDocumentTitles-9A315B77--en" keys="doctitles_coresw" navtitle="WH: Doc Titles Tridium Core Software" processing-role="resource-only" scope="local"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">WH: Core Software Document Titles-TRIDIUM</navtitle></topicmeta></keydef><keydef class="+ map/topicref mapgroup-d/keydef " clean-name="wh-driver-software-document-titles-tridium" display-name="WH: Driver Software Document Titles-TRIDIUM" file-id="a02e4160-c76e-11ee-be84-42010af00059" format="dita" href="#WHDriverSoftwareDocumentTitles-9A319330--en" keys="doctitles_drivers" navtitle="WH: Driver Software Document Titles" processing-role="resource-only" scope="local"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">WH: Driver Software Document Titles-TRIDIUM</navtitle></topicmeta></keydef><keydef class="+ map/topicref mapgroup-d/keydef " clean-name="wh-hardware-document-titles--tridium" display-name="WH: Hardware Document Titles — Tridium" file-id="a0417b40-c76e-11ee-be84-42010af00059" format="dita" href="#WHHardwareDocumentTitlesTridium-9A3181CB--en" keys="doctitles_hardware" navtitle="WH: Hardware Document Titles — Tridium" processing-role="resource-only" scope="local"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">WH: Hardware Document Titles — Tridium</navtitle></topicmeta></keydef><keydef class="+ map/topicref mapgroup-d/keydef " clean-name="legal-notice" display-name="Legal Notice" file-id="a0ad3560-c76e-11ee-be84-42010af00059" format="dita" href="#legal_niagara_tridium--en" keys="legal_notices" navtitle="Legal_Notices_Tridium" processing-role="resource-only" scope="local"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Legal Notice</navtitle></topicmeta></keydef><keydef class="+ map/topicref mapgroup-d/keydef " clean-name="marketplace-legal-notice" display-name="Marketplace Legal Notice" file-id="a6ca6440-d281-11ee-8489-0242f838b79f" format="dita" href="#legal_notices_marketplace--en" keys="legal_notices_marketplace" navtitle="Marketplace Legal" scope="local"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Marketplace Legal Notice</navtitle></topicmeta></keydef><keydef class="+ map/topicref mapgroup-d/keydef " clean-name="reuse1" display-name="Reuse1" file-id="66dbb9b0-c76e-11ee-be84-42010af00059" format="dita" href="#Reuse1-CAD76CAC--en" keys="reusekey" navtitle="Reuse1" processing-role="resource-only" scope="local"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Reuse1</navtitle></topicmeta></keydef><keydef class="+ map/topicref mapgroup-d/keydef " clean-name="whguidecloud-reusable-content" display-name="WH–Guide–Cloud reusable content" file-id="b46df8a0-c76e-11ee-be84-42010af00059" href="#NCloudReusableContent-DC5C2A6E--en" keys="ncloud" processing-role="resource-only"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">WH–Guide–Cloud reusable content</navtitle></topicmeta></keydef><keydef class="+ map/topicref mapgroup-d/keydef " clean-name="general-elements" display-name="General elements" file-id="b23371f0-c76e-11ee-be84-42010af00059" href="#descGen--en" keys="gen Gen" processing-role="resource-only"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">General elements</navtitle></topicmeta></keydef></topicgroup><notices class="- map/topicref bookmap/notices " clean-name="legal-notices" display-name="Legal Notices" file-id="a0ad3560-c76e-11ee-be84-42010af00059" href="#legal_niagara_tridium--en--1"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Legal Notices</navtitle></topicmeta></notices><booklists class="- map/topicref bookmap/booklists "><toc class="- map/topicref bookmap/toc "/></booklists><preface class="- map/topicref bookmap/preface " id="preface-138-C05274F6"><topicref cascade="nomerge" class="- map/topicref " clean-name="about-this-guide" display-name="About this guide" file-id="b18d2e10-d26a-11ee-8489-0242f838b79f" format="dita" href="#AboutThisGuideAWSUtilsModuleGuide-0D5A24DC--en" navtitle="About this guide " otherprops="homepage no_search" outputclass="about" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">About this guide</navtitle></topicmeta><topicref class="- map/topicref " clean-name="document-change-log" display-name="Document change log" file-id="a3012740-d281-11ee-8489-0242f838b79f" format="dita" href="#DocumentChangeLog-0D5A6F57--en" navtitle="Document change log" otherprops="no_search" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Document change log</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="related-documentation" display-name="Related Documentation" file-id="d77867e0-d290-11ee-8489-0242f838b79f" format="dita" href="#reference-1-0D5D0C8C--en" navtitle="Related Documentation " otherprops="no_search" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Related Documentation</navtitle></topicmeta></topicref></topicref></preface></frontmatter><chapter class="- map/topicref bookmap/chapter " clean-name="about-aws-utils" display-name="About AWS Utils" file-id="b0e99b10-d26a-11ee-8489-0242f838b79f" format="dita" href="#AboutAWSUtils-0D452A21--en" navtitle="About AWS Utils" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">About AWS Utils</navtitle></topicmeta><topicref class="- map/topicref " clean-name="overview" display-name="Overview" file-id="aa53d920-d281-11ee-8489-0242f838b79f" format="dita" href="#OverviewSigningService-078DA5FB--en" navtitle="Overview" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Overview</navtitle></topicmeta></topicref></chapter><chapter class="- map/topicref bookmap/chapter " clean-name="aws-utils" display-name="AWS Utils" file-id="a084dca0-d281-11ee-8489-0242f838b79f" format="dita" href="#AWSUtils-079A56D8--en" navtitle="AWS Utils" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">AWS Utils</navtitle></topicmeta><topicref class="- map/topicref " clean-name="provisioning-niagaranetwork-with-aws-mqtt-devices" display-name="Provisioning NiagaraNetwork with AWS MQTT devices" file-id="26b67c30-c787-11ee-be84-42010af00059" format="dita" href="#ProvisioningNiagaraNetworkWithAWSMQ-07A3958F--en" navtitle="Provisioning NiagaraNetwork with AWS MQTT devices" scope="local" type="task"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Provisioning NiagaraNetwork with AWS MQTT devices</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="configuring-just-in-time-provisioning-jitp" display-name="Configuring Just In Time Provisioning (JITP)" file-id="a2769a80-d281-11ee-8489-0242f838b79f" format="dita" href="#ConfiguringJustInTimeProvisioningJI-08076CF9--en" navtitle="Configuring Just In Time Provisioning (JITP)" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Configuring Just In Time Provisioning (JITP)</navtitle></topicmeta><topicref class="- map/topicref " clean-name="commissioning-controllers-without-jitp" display-name="Commissioning controllers without JITP" file-id="de9a18d0-c786-11ee-be84-42010af00059" format="dita" href="#CommissioningControllersWithoutJITP-0812B407--en" navtitle="Commissioning controllers without JITP" scope="local" type="task"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Commissioning controllers without JITP</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="commissioning-controllers-with-jitp" display-name="Commissioning controllers with JITP" file-id="a22f0a30-d281-11ee-8489-0242f838b79f" format="dita" href="#CommissioningControllersWithJITP-082094B2--en" navtitle="Commissioning controllers with JITP" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Commissioning controllers with JITP</navtitle></topicmeta><topicref class="- map/topicref " clean-name="setting-up-jitp-for-devices" display-name="Setting up JITP for devices" file-id="277622b0-c787-11ee-be84-42010af00059" format="dita" href="#SettingUpJITPForDevices-08255407--en" navtitle="Setting up JITP for devices" scope="local" type="task"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Setting up JITP for devices</navtitle></topicmeta></topicref></topicref></topicref><topicref class="- map/topicref " clean-name="configuring-signing-service-for-aws" display-name="Configuring Signing Service for AWS" file-id="def00100-c786-11ee-be84-42010af00059" format="dita" href="#ConfiguringSigningServiceForAWS-07B0BE95--en" navtitle="Configuring Signing Service for AWS" scope="local" type="task"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Configuring Signing Service for AWS</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="running-install-aws-mqtt-device-task" display-name="Running Install AWS MQTT Device task" file-id="270ba110-c787-11ee-be84-42010af00059" format="dita" href="#RunningInstallAWSMQTTDeviceTask-07B10905--en" navtitle="Running Install AWS MQTT Device task" scope="local" type="task"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Running Install AWS MQTT Device task</navtitle></topicmeta></topicref></chapter><chapter class="- map/topicref bookmap/chapter " clean-name="components-views-and-windows" display-name="Components, views and windows" file-id="a261da00-d281-11ee-8489-0242f838b79f" format="dita" href="#ComponentsViewsAndWindow-SigningService--en" navtitle="Components, views and windows" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Components, views and windows</navtitle></topicmeta><topicref class="- map/topicref " clean-name="components" display-name="Components" file-id="a2481070-d281-11ee-8489-0242f838b79f" format="dita" href="#Components-0567A524--en" navtitle="Components" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Components</navtitle></topicmeta><topicref class="- map/topicref " clean-name="aws-service-awsutils-awsservice" display-name="Aws Service (awsUtils-AwsService)" file-id="a0826ba0-d281-11ee-8489-0242f838b79f" format="dita" href="#AwsServiceawsUtils-AwsService-0897C174--en" navtitle="Aws Service (awsUtils-AwsService)" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Aws Service (awsUtils-AwsService)</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="aws-access-key-folder-awsutils-awsaccesskeyfolder" display-name="Aws Access Key Folder (awsUtils-AwsAccessKeyFolder)" file-id="a0806fd0-d281-11ee-8489-0242f838b79f" format="dita" href="#AwsAccessKeyFolderawsUtils-AwsAcces-08A642A2--en" navtitle="Aws Access Key Folder (awsUtils-AwsAccessKeyFolder)" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Aws Access Key Folder (awsUtils-AwsAccessKeyFolder)</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="aws-stored-access-key-awsutils-awsstoredaccesskey" display-name="Aws Stored Access Key (awsUtils-AwsStoredAccessKey)" file-id="a0841950-d281-11ee-8489-0242f838b79f" format="dita" href="#AwsStoredAccessKeyawsUtils-AwsStore-08AAD87B--en" navtitle="Aws Stored Access Key (awsUtils-AwsStoredAccessKey)" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Aws Stored Access Key (awsUtils-AwsStoredAccessKey)</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="aws-iot-awsutils-awsiot" display-name="Aws IoT (awsUtils-AwsIoT)" file-id="a0813320-d281-11ee-8489-0242f838b79f" format="dita" href="#AwsIoTawsUtils-AwsIoT-08B57865--en" navtitle="Aws IoT (awsUtils-AwsIoT)" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Aws IoT (awsUtils-AwsIoT)</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="aws-signing-profile-awsutils-awssigningprofile" display-name="Aws Signing Profile (awsUtils-AwsSigningProfile)" file-id="a0832ef0-d281-11ee-8489-0242f838b79f" format="dita" href="#AwsSigningProfileawsUtils-AwsSignin-08BB0465--en" navtitle="Aws Signing Profile (awsUtils-AwsSigningProfile)" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Aws Signing Profile (awsUtils-AwsSigningProfile)</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="aws-jitp-mqtt-authenticator-abstractmqttdriver-awsjitpmqttauthenticator" display-name="Aws Jitp Mqtt Authenticator (abstractMqttDriver-AwsJitpMqttAuthenticator)" file-id="9f74a520-d281-11ee-8489-0242f838b79f" format="dita" href="#AwsJitpMqttAuthenticatorabstractMqt-061BB575--en" navtitle="Aws Jitp Mqtt Authenticator (abstractMqttDriver-AwsJitpMqttAuthenticator)" scope="local" type="reference"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Aws Jitp Mqtt Authenticator (abstractMqttDriver-AwsJitpMqttAuthenticator)</navtitle></topicmeta></topicref></topicref></chapter><chapter class="- map/topicref bookmap/chapter " clean-name="glossary" display-name="Glossary" file-id="57c39a92-b894-4a0d-badc-26d78c6aa721" href="#concept-7242--en" outputclass="gloss_start"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Glossary</navtitle></topicmeta><topicref class="- map/topicref " clean-name="access-key" display-name="Access Key" file-id="c0d1b120-c76b-11ee-be84-42010af00059" format="dita" href="#AccessKey-09388ABC--en" navtitle="Access Key" scope="local" toc="no" type="glossentry"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Access Key</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="access-key-id" display-name="Access Key Id" file-id="c0d24d60-c76b-11ee-be84-42010af00059" format="dita" href="#AccessKeyId-0938F119--en" navtitle="Access Key Id" scope="local" toc="no" type="glossentry"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Access Key Id</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="amazon-resource-name-arn" display-name="Amazon Resource Name (ARN)" file-id="c0d53390-c76b-11ee-be84-42010af00059" format="dita" href="#AmazonResourceNameARN-09397C8B--en" navtitle="Amazon Resource Name (ARN)" scope="local" toc="no" type="glossentry"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Amazon Resource Name (ARN)</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="amazon-web-services-aws" display-name="Amazon Web Services (AWS)" file-id="c0d5a8c0-c76b-11ee-be84-42010af00059" format="dita" href="#AmazonWebServicesAWS-09376B19--en" navtitle="Amazon Web Services (AWS)" scope="local" toc="no" type="glossentry"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Amazon Web Services (AWS)</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="aws-iot" display-name="AWS IoT" file-id="c0d75670-c76b-11ee-be84-42010af00059" format="dita" href="#AWSIoT-0937D79C--en" navtitle="AWS IoT" scope="local" toc="no" type="glossentry"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">AWS IoT</navtitle></topicmeta></topicref><topicref class="- map/topicref " clean-name="just-in-time-provisioning-jitp" display-name="Just In Time Provisioning (JITP)" file-id="c102d340-c76b-11ee-be84-42010af00059" format="dita" href="#JustInTimeProvisioningJITP-0D37B3CB--en" navtitle="Just In Time Provisioning (JITP)" scope="local" toc="no" type="glossentry"><topicmeta class="- map/topicmeta "><navtitle class="- topic/navtitle ">Just In Time Provisioning (JITP)</navtitle></topicmeta></topicref></chapter><backmatter class="- map/topicref bookmap/backmatter "><booklists class="- map/topicref bookmap/booklists "><indexlist class="- map/topicref bookmap/indexlist "/></booklists></backmatter></bookmap><reference id="legal_niagara_tridium--en--1" outputclass="legal_niagara_tridium" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Legal Notice</title><?Pub Caret -2?><shortdesc class="- topic/shortdesc "/><refbody class="- topic/body        reference/refbody "><section id="address" class="- topic/section ">
            <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Tridium, Incorporated</b></p>
            <p class="- topic/p ">3951 Western Parkway, Suite 350</p>
            <p class="- topic/p ">Richmond, Virginia 23233</p>
            <p class="- topic/p ">U.S.A.</p>
        </section><section class="- topic/section ">
            <title class="- topic/title ">Confidentiality</title>
            <p class="- topic/p ">The information contained in this document is confidential information of Tridium, Inc., a Delaware corporation (Tridium). Such information and the software described herein, is furnished under a license agreement and may be used only in accordance with that agreement.</p>
            <p class="- topic/p ">The information contained in this document is provided solely for use by Tridium employees, licensees, and system owners; and, except as permitted under the below copyright notice, is not to be released to, or reproduced for, anyone else.</p><p class="- topic/p ">While every effort has been made to assure the accuracy of this document, Tridium is not responsible for damages of any kind, including without limitation consequential damages, arising from the application of the information contained herein. Information and specifications published here are current as of the date of this publication and are subject to change without notice. The latest product specifications can be found by contacting our corporate headquarters, Richmond, Virginia.</p>
            
        </section><section class="- topic/section ">
            <title class="- topic/title ">Trademark notice</title>
            <p class="- topic/p ">BACnet and ASHRAE are registered trademarks of American Society of Heating, Refrigerating and Air-Conditioning Engineers. Microsoft, Excel, Internet Explorer, Windows, Windows Vista, Windows Server, and SQL Server are registered trademarks of Microsoft Corporation. Oracle and Java are registered trademarks of Oracle and/or its affiliates. Mozilla and Firefox are trademarks of the Mozilla Foundation. Echelon, LON, LonMark, LonTalk, and LonWorks are registered trademarks of Echelon Corporation. Tridium, JACE, Niagara Framework, and Sedona Framework are registered trademarks, and Workbench are trademarks of Tridium Inc. All other product names and services mentioned in this publication that are known to be trademarks, registered trademarks, or service marks are the property of their respective owners.</p>
        </section><section class="- topic/section ">
            <title class="- topic/title ">Copyright and patent notice</title>
            <p class="- topic/p ">This document may be copied by parties who are authorized to distribute Tridium products in connection with distribution of those products, subject to the contracts that authorize such distribution. It may not otherwise, in whole or in part, be copied, photocopied, reproduced, translated, or reduced to any electronic medium or machine-readable form without prior written consent from Tridium, Inc.</p>
            
            <p class="- topic/p ">Copyright © 2025 Tridium, Inc. All rights reserved. </p><p class="- topic/p ">The product(s) described herein may be covered by one or more U.S. or foreign patents of Tridium. </p><p class="- topic/p ">For an important patent notice, please visit: <xref href="http://www.honpat.com" scope="external" class="- topic/xref " outputclass="j-external-link">http://www.honpat.com</xref>.</p>
        </section></refbody></reference><reference id="AboutThisGuideAWSUtilsModuleGuide-0D5A24DC--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">About this guide </title><shortdesc class="- topic/shortdesc "><ph class="- topic/ph ">This topic contains important information about the purpose, content, context, and intended audience for this document.</ph></shortdesc><refbody class="- topic/body        reference/refbody "><section class="- topic/section ">
            <title class="- topic/title ">Product Documentation</title><ph class="- topic/ph ">This document is part of the <ph class="- topic/ph ">Niagara</ph> technical documentation library. Released versions of <keyword class="- topic/keyword ">Niagara</keyword> software include a complete collection of technical information that is provided in both online help and PDF format. The information in this document is written primarily for Systems Integrators. To make the most of the information in this book, readers should have some training or previous experience with <keyword class="- topic/keyword ">Niagara</keyword> software, as well as experience working with <ph class="- topic/ph ">JACE</ph> network controllers.</ph>
        </section><?Pub Caret 24?><section class="- topic/section "><title class="- topic/title ">Document Content</title>This document describes how to move data to AWS IoT via MQTT drivers, provision MQTT connectivity on a fleet of controllers without individual manual setup, and how to renew onboarding for every controller before expiration.</section></refbody><reference id="DocumentChangeLog-0D5A6F57--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Document change log</title><shortdesc class="- topic/shortdesc ">Changes to this document are listed in this topic.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">document change log</indexterm></keywords></metadata><metadata class="- topic/metadata "/></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">Initial release publication: March 3, 2023</p><p class="- topic/p "/></li><?Pub Caret 34?></ul></section></refbody></reference><reference id="reference-1-0D5D0C8C--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Related Documentation </title><shortdesc class="- topic/shortdesc "/><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">Related Documentation </indexterm></keywords></metadata></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p "><cite class="- topic/cite "><ph class="- topic/ph ">Niagara Signing Service Guide</ph></cite></p></li><li class="- topic/li "><p class="- topic/p "><cite class="- topic/cite "><ph class="- topic/ph ">Abstract MQTT Driver Guide</ph></cite></p></li><li class="- topic/li "><p class="- topic/p "><cite class="- topic/cite "><ph class="- topic/ph ">Niagara Station Security Guide</ph></cite></p></li></ul></section></refbody></reference></reference><reference id="AboutAWSUtils-0D452A21--en" outputclass="chapter_start" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">About AWS Utils</title><shortdesc class="- topic/shortdesc "/><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">About AWS Utils</indexterm></keywords></metadata><?Pub Caret 17?></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><title class="- topic/title "/></section></refbody><reference id="OverviewSigningService-078DA5FB--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Overview</title><shortdesc class="- topic/shortdesc ">As of <keyword class="- topic/keyword "><?Pub _nolinebreak?>Niagara 4.13<?Pub /_nolinebreak?></keyword>, you can use a simplified and quicker way to publish data
to AWS IoT via MQTT drivers, provision MQTT connectivity on a series
of controllers with zero touch, and renew onboarding for every controller
when they come to expire.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">Overview</indexterm><indexterm class="- topic/indexterm ">Signing
Service</indexterm><indexterm class="- topic/indexterm ">AWS provisioning</indexterm></keywords></metadata></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section ">Here are the simplified steps that will save you time: <ol class="- topic/ol "><li class="- topic/li "><p class="- topic/p "><keyword class="- topic/keyword ">Supervisor</keyword>: Job creates and registers CA (Certificate Authority).</p></li><li class="- topic/li "><p class="- topic/p ">Provision each controller with the new MQTT device.</p></li><li class="- topic/li "><p class="- topic/p ">Automatically request a certificate from the Signing Service.</p></li><li class="- topic/li "><p class="- topic/p ">Admin user approves request. Certificate is signed (sealed)
and delivered.</p></li><li class="- topic/li "><p class="- topic/p ">Connect to AWS IoT.</p></li><li class="- topic/li "><p class="- topic/p ">Certificate will be auto-renewed before expiry.</p></li></ol></section></refbody><?Pub Caret -1?></reference></reference><reference id="AWSUtils-079A56D8--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">AWS Utils</title><shortdesc class="- topic/shortdesc ">The AWS (Amazon Web Services) Utils module provides utilities
and configuration to enable a <keyword class="- topic/keyword ">Niagara</keyword> station to interact with certain services within
AWS. New features enable a fleet of <keyword class="- topic/keyword ">Niagara</keyword> controller stations to be automatically commissioned
with MQTT devices and signed device certificates, which automatically
connect to AWS requiring no manual user setup on the controller station.
Those devices will also automatically renew their certificates prior
to expiration and remain connected.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">AWS Utils</indexterm></keywords></metadata></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><title class="- topic/title ">Use:</title><ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">Using the service within the module, you can register access
keys for authenticating with AWS.</p></li><li class="- topic/li "><p class="- topic/p ">You can configure and execute service specific tasks, such
as interaction with the AWS REST endpoints. These tasks may typically
be one-off configuration tasks during station commissioning. Thus,
by default access keys are only stored temporarily.</p></li></ul><p class="- topic/p ">This module also supplies a <keyword class="- topic/keyword ">Niagara</keyword> provisioning task to furnish the various stations
of your NiagaraNetwork with an AWS MQTT device that can utilize the
benefits of <uicontrol class="+ topic/ph ui-d/uicontrol ">Just In Time Provisioning</uicontrol> (JITP).</p></section><section class="- topic/section "><title class="- topic/title ">Prerequisites:</title><ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">You have installed the <keyword class="- topic/keyword "><?Pub _nolinebreak?>Niagara 4.13<?Pub /_nolinebreak?></keyword> version.</p></li><li class="- topic/li "><p class="- topic/p ">You have installed the following modules: <apiname class="+ topic/keyword pr-d/apiname ">awsUtils-rt,
awsUtils-wb, awsUtils-ux</apiname>. </p></li><li class="- topic/li "><p class="- topic/p ">The station hosting the AWS Service must have access to <cite class="- topic/cite ">amazonaws.*.com</cite> on <apiname class="+ topic/keyword pr-d/apiname ">port 443</apiname> to interact
with the REST endpoint.</p></li><?Pub Caret 37?><li class="- topic/li "><p class="- topic/p ">All remote target stations require to be at <keyword class="- topic/keyword "><?Pub _nolinebreak?>Niagara 4.13<?Pub /_nolinebreak?></keyword> or higher.</p></li></ul></section></refbody><task id="ProvisioningNiagaraNetworkWithAWSMQ-07A3958F--en" xml:lang="en-us" class="- topic/topic task/task "><title class="- topic/title ">Provisioning NiagaraNetwork with AWS MQTT devices</title><shortdesc class="- topic/shortdesc ">There are three main steps to create a fleet of MQTT devices
on your controller stations:</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">Provisioning NiagaraNetwork with AWS
MQTT devices</indexterm></keywords></metadata></prolog><taskbody class="- topic/body task/taskbody "><prereq class="- topic/section task/prereq "><p class="- topic/p ">All remote target stations require to be at <keyword class="- topic/keyword "><?Pub _nolinebreak?>Niagara 4.13<?Pub /_nolinebreak?></keyword> or higher.</p></prereq><steps class="- topic/ol task/steps "><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Register your account to use the <uicontrol class="+ topic/ph ui-d/uicontrol ">Just In Time
Provisioning</uicontrol> task using the AWS Service on a <keyword class="- topic/keyword ">Supervisor</keyword>. See <xref format="dita" scope="local" type="reference" class="- topic/xref " file-uuid="a2769a80-d281-11ee-8489-0242f838b79f" href="#ConfiguringJustInTimeProvisioningJI-08076CF9--en"><?Pub _previewtext
text="Configuring Just In Time Provisioning (JITP)"?>Configuring Just In Time Provisioning (JITP)</xref> for more
details.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Set up the <keyword class="- topic/keyword ">Niagara</keyword> Signing Service on a <keyword class="- topic/keyword ">Supervisor</keyword> to supply signed device certificates. See <xref format="dita" scope="local" type="task" class="- topic/xref " file-uuid="def00100-c786-11ee-be84-42010af00059" href="#ConfiguringSigningServiceForAWS-07B0BE95--en">page: Configure the Signing Service for
AWS</xref> for more details.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Run the <uicontrol class="+ topic/ph ui-d/uicontrol ">Install AWS MQTT Device</uicontrol> task
to install MQTT devices on each controller. See <xref format="dita" scope="local" type="task" class="- topic/xref " file-uuid="270ba110-c787-11ee-be84-42010af00059" href="#RunningInstallAWSMQTTDeviceTask-07B10905--en">page: Running the AWS MQTT Provisioning Task</xref> for
more details.</cmd></step><?Pub Caret 88?></steps></taskbody></task><reference id="ConfiguringJustInTimeProvisioningJI-08076CF9--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Configuring Just In Time Provisioning (JITP)</title><shortdesc class="- topic/shortdesc "><uicontrol class="+ topic/ph ui-d/uicontrol ">AWS Just In Time Provisioning</uicontrol> (JITP)
allows you to provision your devices within AWS IoT upon first connection,
thereby eliminating many manual configuration tasks. This is relevant
in that the MQTT driver supports connections to AWS IoT, using certificates
as means of authentication for each MQTT device.</shortdesc><?Pub Caret 112?><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">Configuring Just In Time Provisioning
(JITP)</indexterm></keywords></metadata></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><p class="- topic/p ">The scenario is that you have many controller devices,
which require a connection to AWS IoT. Consequently, each controller
requires its own certificate signed by a trusted CA certificate*.
These certificates in the past have required manual generation and
setup within both <keyword class="- topic/keyword ">Niagara</keyword> and AWS, and a repetition of the same task when
they expire.<image placement="break" class="- topic/image " href="4ee1af80-c14d-11ee-be84-42010af00059.png"/></p></section></refbody><task id="CommissioningControllersWithoutJITP-0812B407--en" xml:lang="en-us" class="- topic/topic task/task "><title class="- topic/title ">Commissioning controllers without JITP</title><shortdesc class="- topic/shortdesc ">The following minimum configuration is necessary to commission
a network of controllers <b class="+ topic/ph hi-d/b ">without JITP</b>.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">Commissioning controllers without JITP</indexterm></keywords></metadata></prolog><taskbody class="- topic/body task/taskbody "><context class="- topic/section task/context "><note class="- topic/note "><p class="- topic/p ">*In 2022 it became possible to communicate with
AWS IoT over MQTT without the requirement for a pre-registered CA
certificate, however we recommend to use trusted certificates for
security purposes.</p></note></context><steps class="- topic/ol task/steps "><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Set up IAM user.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Create an AWS IoT policy for your devices.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Attach various allowed actions and roles to the policy.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Obtain a CA certificate.*</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">In the AWS console or command line, obtain a <uicontrol class="+ topic/ph ui-d/uicontrol ">verification code</uicontrol>. *</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Generate a verification certificate with the verification
code as the <uicontrol class="+ topic/ph ui-d/uicontrol ">Common Name</uicontrol>.*</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Sign the verification certificate with the CA certificate.*</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Upload CA certificate and verification certificate.*</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Activate certificates.*</cmd></step></steps><result class="- topic/section task/result "/><example class="- topic/example "/><postreq class="- topic/section task/postreq "><p class="- topic/p ">Repeat the following steps for each device:</p><ol class="- topic/ol "><li class="- topic/li "><p class="- topic/p ">Install the MQTT network and device in your station.</p></li><li class="- topic/li "><p class="- topic/p ">Create a <uicontrol class="+ topic/ph ui-d/uicontrol ">Thing</uicontrol> to represent the device
in AWS.</p></li><li class="- topic/li "><p class="- topic/p ">Associate IoT policy with the <uicontrol class="+ topic/ph ui-d/uicontrol ">Thing</uicontrol>.</p></li><li class="- topic/li "><p class="- topic/p ">Generate a device-specific client certificate.</p></li><li class="- topic/li "><p class="- topic/p ">Sign the device certificate with the CA certificate.</p></li><li class="- topic/li "><p class="- topic/p ">Upload the device certificate to AWS and activate.</p></li><li class="- topic/li "><p class="- topic/p ">Associate certificate with the <uicontrol class="+ topic/ph ui-d/uicontrol ">Thing</uicontrol>.</p></li><li class="- topic/li "><p class="- topic/p ">Combine CA certificate, device certificate, and key into a <codeph class="+ topic/ph pr-d/codeph ">.pem</codeph> file.</p></li><li class="- topic/li "><p class="- topic/p ">Upload the <codeph class="+ topic/ph pr-d/codeph ">.pem</codeph> file to the <keyword class="- topic/keyword ">Niagara</keyword> platform certificate manager.</p></li><li class="- topic/li "><p class="- topic/p ">Set the alias of the imported certificate on the MQTT device
authenticator.</p></li><li class="- topic/li "><p class="- topic/p ">Connect.</p></li></ol><p class="- topic/p ">Prior to device certificate expiration, it is necessary to
repeat these steps for each device .</p><?Pub Caret 41?></postreq></taskbody></task><reference id="CommissioningControllersWithJITP-082094B2--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Commissioning controllers with JITP</title><shortdesc class="- topic/shortdesc ">The following process describes how you can commission
controllers using Just In Time Provisioning.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">Commissioning controllers with JITP</indexterm></keywords></metadata></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><title class="- topic/title "/><p class="- topic/p "/></section><section class="- topic/section "><image placement="break" scale="85" scope="local" class="- topic/image " href="483cc9d0-c14d-11ee-be84-42010af00059.png"/><ol class="- topic/ol "><li class="- topic/li "><p class="- topic/p ">The <parmname class="+ topic/keyword pr-d/parmname ">AWSIoTThingsRegistration</parmname> role is assigned
to an AWS access key.</p></li><li class="- topic/li "><p class="- topic/p ">A CA certificate is registered along with a provisioning template
policy by a process authorized by that role.</p></li><li class="- topic/li "><p class="- topic/p ">Any device trying to connect to the AWS IoT endpoint for that
account will initially have the connection rejected.</p></li><li class="- topic/li "><p class="- topic/p ">However, if that certificate presented as authentication was
signed by the CA registered in step 1, AWS will then automatically
commission a Thing to represent your device according to the rules
in the provisioning template, thereby using values from the certificate.
When the device makes a subsequent connection attempt, it will be
granted access.</p></li></ol><p class="- topic/p ">The functionality within the AWS service allows a <keyword class="- topic/keyword ">Niagara</keyword> <keyword class="- topic/keyword ">Workbench</keyword> user to perform the task of optionally generating a new
CA certificate or using a user-imported one, and performing the CA
registration and template creation with AWS via their REST API.</p></section><section class="- topic/section "><p class="- topic/p ">The provisioning template created by <keyword class="- topic/keyword ">Niagara</keyword> <keyword class="- topic/keyword ">Workbench</keyword> will result in the following:<ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">The Thing name within AWS matches the <parmname class="+ topic/keyword pr-d/parmname ">Common Name</parmname> value of the device certificate.</p></li><li class="- topic/li "><p class="- topic/p ">The Thing will be granted a policy allowing the following permissions
for all resources:<ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">iot:Connect</p></li><li class="- topic/li "><p class="- topic/p ">iot:Publish</p></li><li class="- topic/li "><p class="- topic/p ">iot:Subscribe</p></li><li class="- topic/li "><p class="- topic/p ">iot:Receive</p></li><li class="- topic/li "><p class="- topic/p ">iot:GetRetainedMessage</p></li><li class="- topic/li "><p class="- topic/p ">iot:ListRetainedMessages</p></li><li class="- topic/li "><p class="- topic/p ">iot:RetainPublish</p></li></ul></p></li></ul></p><title class="- topic/title "/></section></refbody><task id="SettingUpJITPForDevices-08255407--en" xml:lang="en-us" class="- topic/topic task/task "><title class="- topic/title ">Setting up JITP for devices</title><shortdesc class="- topic/shortdesc ">The following steps describe how to set up Just In Time
Provisioning for <keyword class="- topic/keyword ">Niagara</keyword> devices.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">Setting up JITP for devices</indexterm></keywords></metadata></prolog><taskbody class="- topic/body task/taskbody "><prereq class="- topic/section task/prereq ">In AWS IoT:<ol class="- topic/ol "><li class="- topic/li "><p class="- topic/p ">Create an IAM user with an access key and save the key value
for future step.</p></li><li class="- topic/li "><p class="- topic/p ">Create an IAM service role with the following permissions: <codeph class="+ topic/ph pr-d/codeph ">AWSIoTThingsRegistration, AWSIoTLogging, AWSIoTConfigAccess, AWSIoTRuleActions</codeph>.</p></li><li class="- topic/li "><p class="- topic/p ">Copy role ARN string for future use.</p></li><li class="- topic/li "><p class="- topic/p ">Create an IAM policy and use the following JSON, substituting
the value of your ARN string from the previous step:<codeblock class="+ topic/pre pr-d/codeblock ">  {
      "Version": "2012-10-17",
      "Statement": [{
          "Effect": "Allow",
          "Action": [
              "iam:GetRole",
              "iam:PassRole"
          ],
          "Resource": "yourArnString"
      }]
  }
</codeblock></p></li><li class="- topic/li "><p class="- topic/p ">Add the policy to your IAM user.</p></li></ol></prereq><context class="- topic/section task/context "> In <keyword class="- topic/keyword ">Workbench</keyword>:</context><steps class="- topic/ol task/steps "><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">From the <apiname class="+ topic/keyword pr-d/apiname ">awsUtils</apiname> palette, add an <uicontrol class="+ topic/ph ui-d/uicontrol ">AWS Service</uicontrol> to the <uicontrol class="+ topic/ph ui-d/uicontrol ">Services</uicontrol> container. </cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">For the <parmname class="+ topic/keyword pr-d/parmname ">Region</parmname>, select the AWS region to which your devices will be provisioned.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Right-click <uicontrol class="+ topic/ph ui-d/uicontrol ">Access Keys</uicontrol> and select <menucascade class="+ topic/ph ui-d/menucascade "><uicontrol class="+ topic/ph ui-d/uicontrol ">Actions</uicontrol><uicontrol class="+ topic/ph ui-d/uicontrol ">Add</uicontrol></menucascade> to add the access key, which has the correct permissions configured
above.</cmd></step><?Pub Caret 13?><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Expand the <uicontrol class="+ topic/ph ui-d/uicontrol ">Aws IoT</uicontrol> component and
populate the <uicontrol class="+ topic/ph ui-d/uicontrol ">Ca Provisioning Params</uicontrol>. </cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Right-click <uicontrol class="+ topic/ph ui-d/uicontrol ">Aws IoT</uicontrol> and select <menucascade class="+ topic/ph ui-d/menucascade "><uicontrol class="+ topic/ph ui-d/uicontrol ">Actions</uicontrol><uicontrol class="+ topic/ph ui-d/uicontrol ">Setup Just In Time Provisioning</uicontrol></menucascade>.</cmd><stepresult class="- topic/itemgroup task/stepresult ">The <keyword class="- topic/keyword ">Niagara</keyword> job will be initiated and a <wintitle class="+ topic/keyword ui-d/wintitle ">Job Log</wintitle> window will appear in <keyword class="- topic/keyword ">Workbench</keyword>.<p class="- topic/p ">The <parmname class="+ topic/keyword pr-d/parmname ">Mqtt Data Endpoint</parmname> property of your <uicontrol class="+ topic/ph ui-d/uicontrol ">Aws IoT</uicontrol> component will not
be populated with the endpoint that your MQTT devices can use to connect
to IoT.</p></stepresult></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">You can now install your MQTT devices to communicate with
AWS. If you choose to do this manually on each station, you will need
to generate each device certificate and sign them individually with
the CA. However with <keyword class="- topic/keyword ">Workbench</keyword>, it is now possible to automate this. See <xref format="dita" scope="local" type="task" class="- topic/xref " file-uuid="26b67c30-c787-11ee-be84-42010af00059" href="#ProvisioningNiagaraNetworkWithAWSMQ-07A3958F--en"><?Pub _previewtext
text="Provisioning NiagaraNetwork with AWS MQTT devices"?>Provisioning NiagaraNetwork with AWS MQTT devices</xref> for
more details.</cmd></step></steps><result class="- topic/section task/result "/><example class="- topic/example "/><postreq class="- topic/section task/postreq "/></taskbody></task></reference></reference><task id="ConfiguringSigningServiceForAWS-07B0BE95--en" xml:lang="en-us" class="- topic/topic task/task "><title class="- topic/title ">Configuring Signing Service for AWS</title><shortdesc class="- topic/shortdesc ">This procedure enables the AWS MQTT devices to request
signed certificates from the <keyword class="- topic/keyword ">Supervisor</keyword>.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">Configuring Signing Service for AWS</indexterm></keywords></metadata></prolog><taskbody class="- topic/body task/taskbody "><context class="- topic/section task/context "/><steps class="- topic/ol task/steps "><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">From the <apiname class="+ topic/keyword pr-d/apiname ">SigningService</apiname> palette, add
a <uicontrol class="+ topic/ph ui-d/uicontrol ">Signing Service</uicontrol> to your station’s <uicontrol class="+ topic/ph ui-d/uicontrol ">Services</uicontrol> container.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">From the <apiname class="+ topic/keyword pr-d/apiname ">awsUtils</apiname> palette, drag <uicontrol class="+ topic/ph ui-d/uicontrol ">AwsSigningProfile</uicontrol> to the <uicontrol class="+ topic/ph ui-d/uicontrol ">Profiles</uicontrol> folder.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Expand <uicontrol class="+ topic/ph ui-d/uicontrol ">Ca Alias And Password</uicontrol>, select
the <parmname class="+ topic/keyword pr-d/parmname ">Alias</parmname> from the drop-down menu, and enter
the <parmname class="+ topic/keyword pr-d/parmname ">Password</parmname> for the CA certificate. You may
have generated or imported this during JITP setup.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">To generate a unique certificate <parmname class="+ topic/keyword pr-d/parmname ">Common Name</parmname> for each device, you can optionally change the settings in the <parmname class="+ topic/keyword pr-d/parmname ">Common Name Template</parmname>.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Expand the <parmname class="+ topic/keyword pr-d/parmname ">Country</parmname> certificate parameter
and enter a value. You can add more certificate parameters from the <apiname class="+ topic/keyword pr-d/apiname ">SigningService</apiname> palette, but <parmname class="+ topic/keyword pr-d/parmname ">Country</parmname> is a minimum requirement.</cmd><info class="- topic/itemgroup task/info ">To learn more about the Signing Service, see “Signing Service”
in <ph class="- topic/ph ">Niagara Signing Service Guide</ph>.</info><?Pub Caret 68?></step></steps><result class="- topic/section task/result "/><example class="- topic/example "/><postreq class="- topic/section task/postreq "/></taskbody></task><task id="RunningInstallAWSMQTTDeviceTask-07B10905--en" xml:lang="en-us" class="- topic/topic task/task "><title class="- topic/title ">Running Install AWS MQTT Device task</title><shortdesc class="- topic/shortdesc ">This task installs an MQTT device on each remote station,
which will automatically onboard itself with the <keyword class="- topic/keyword ">Supervisor</keyword>’s Signing Service, obtain a signed certificate, and connect
to AWS.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">Running Install AWS MQTT Device task</indexterm></keywords></metadata></prolog><taskbody class="- topic/body task/taskbody "><prereq class="- topic/section task/prereq "><ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">You have an active NiagaraNetwork connection to each station
on your <keyword class="- topic/keyword ">Supervisor</keyword>.</p></li><li class="- topic/li "><p class="- topic/p ">Each station has a reciprocal connection back to the <keyword class="- topic/keyword ">Supervisor</keyword>.</p></li><li class="- topic/li "><p class="- topic/p ">You have completed the previous steps to configure the AwsService
and SigningService</p></li></ul></prereq><context class="- topic/section task/context "><p class="- topic/p "/></context><steps class="- topic/ol task/steps "><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Navigate to your NiagaraNetwork and double-click <uicontrol class="+ topic/ph ui-d/uicontrol ">ProvisioningNwExt</uicontrol>.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Optionally, you can add the provisioning step <uicontrol class="+ topic/ph ui-d/uicontrol ">Setup Reciprocal Connection</uicontrol> to create the required connection
back to the <keyword class="- topic/keyword ">Supervisor</keyword> if the stations do not have this already.</cmd></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Add the provisioning step <uicontrol class="+ topic/ph ui-d/uicontrol ">Install AWS MQTT Device</uicontrol>.</cmd><stepresult class="- topic/itemgroup task/stepresult ">The <wintitle class="+ topic/keyword ui-d/wintitle ">Install AWS MQTT Device</wintitle> windows
opens.</stepresult></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Fill in the following details in the window:</cmd><info class="- topic/itemgroup task/info "><ol class="- topic/ol "><li class="- topic/li "><p class="- topic/p "><parmname class="+ topic/keyword pr-d/parmname ">Mqtt Device Name</parmname>: Name of the MQTT device. It will be uniform on each station.</p></li><li class="- topic/li "><p class="- topic/p "><parmname class="+ topic/keyword pr-d/parmname ">Signing Service Station</parmname>: Name of the <keyword class="- topic/keyword ">Supervisor</keyword> that contains the Signing Service.</p></li><li class="- topic/li "><p class="- topic/p "><parmname class="+ topic/keyword pr-d/parmname ">Mqtt Broker Endpoint</parmname>: Your AWS MQTT endpoint. If you have run the JITP setup, this
will be pre-populated.</p></li><li class="- topic/li "><p class="- topic/p "><parmname class="+ topic/keyword pr-d/parmname ">Certificate Password</parmname>: The password to use when storing your signed device certificate.</p></li><li class="- topic/li "><p class="- topic/p "><parmname class="+ topic/keyword pr-d/parmname ">Signing Service Onboarding Comment</parmname>: A comment, which will appear in the Signing Service against
each device’s CSR.</p></li><li class="- topic/li "><p class="- topic/p ">In the <wintitle class="+ topic/keyword ui-d/wintitle ">Stations to include in the job field</wintitle>, add the stations you wish to provision and click <uicontrol class="+ topic/ph ui-d/uicontrol ">Run Now</uicontrol>.</p></li></ol></info></step><step class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Navigate to <menucascade class="+ topic/ph ui-d/menucascade "><uicontrol class="+ topic/ph ui-d/uicontrol ">Signing Service</uicontrol><uicontrol class="+ topic/ph ui-d/uicontrol ">Transports</uicontrol><uicontrol class="+ topic/ph ui-d/uicontrol ">foxTransport</uicontrol><uicontrol class="+ topic/ph ui-d/uicontrol ">Session Token Store</uicontrol></menucascade> and approve
the requests received shortly from each device.</cmd></step><?Pub Caret 122?></steps><result class="- topic/section task/result ">Now each created device on each station automatically obtains
their signed certificate and connects to AWS.</result><postreq class="- topic/section task/postreq "/></taskbody></task></reference><reference id="ComponentsViewsAndWindow-SigningService--en" xml:lang="en" class="- topic/topic       reference/reference ">
<title class="- topic/title ">Components, views and windows</title>
<shortdesc class="- topic/shortdesc ">The user interface includes components, views and windows,
which provide the means for communicating with the system.</shortdesc>
<prolog class="- topic/prolog ">
<metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">components</indexterm><indexterm class="- topic/indexterm ">views</indexterm>
<indexterm class="- topic/indexterm ">plugins</indexterm><indexterm class="- topic/indexterm ">windows</indexterm></keywords>
</metadata>
</prolog>
<refbody class="- topic/body        reference/refbody ">
<section class="- topic/section "><p class="- topic/p ">The Help topics include context sensitive information
about each component and view, as well as information about individual
windows.</p></section>
</refbody>
<reference id="Components-0567A524--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Components</title><shortdesc class="- topic/shortdesc ">Components include services, folders and other model building
blocks associated with a module. You may drag them to a property or
wire sheet from a palette.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">components</indexterm></keywords></metadata></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><p class="- topic/p ">Descriptions included in the following topics appear as
context-sensitive help topics when accessed by:<ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">Right-clicking on the object and selecting <menucascade class="+ topic/ph ui-d/menucascade "><uicontrol class="+ topic/ph ui-d/uicontrol ">Views</uicontrol><uicontrol class="+ topic/ph ui-d/uicontrol ">Guide Help</uicontrol></menucascade></p></li><li class="- topic/li "><p class="- topic/p ">Clicking <menucascade class="+ topic/ph ui-d/menucascade "><uicontrol class="+ topic/ph ui-d/uicontrol ">Help</uicontrol><uicontrol class="+ topic/ph ui-d/uicontrol ">Guide On Target</uicontrol></menucascade></p></li></ul></p></section></refbody><reference id="AwsServiceawsUtils-AwsService-0897C174--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Aws Service (awsUtils-AwsService)</title><shortdesc class="- topic/shortdesc ">The <uicontrol class="+ topic/ph ui-d/uicontrol ">Aws Service</uicontrol> provides utilities
and configuration to enable a <keyword class="- topic/keyword ">Niagara</keyword> station to interact with certain services within AWS. </shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">awsUtils-AwsService</indexterm></keywords></metadata></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><p class="- topic/p ">The service itself allows you to define the AWS region
to which your assets belong for this station or site. The region is
used when forming requests to the REST API. The spy page for the service
contains details of REST requests made.</p><?Pub Caret 5?><image placement="break" width="700" class="- topic/image " href="46eace60-c14d-11ee-be84-42010af00059.png"/><p class="- topic/p ">To use the <uicontrol class="+ topic/ph ui-d/uicontrol ">Aws Service</uicontrol> component, drag an instance from the <apiname class="+ topic/keyword pr-d/apiname ">awsUtils</apiname> palette to the station’s <uicontrol class="+ topic/ph ui-d/uicontrol ">Services</uicontrol> container.</p><title class="- topic/title "/></section><properties class="- topic/simpletable reference/properties "><prophead class="- topic/sthead      reference/prophead "><proptypehd class="- topic/stentry     reference/proptypehd ">Property</proptypehd><propvaluehd class="- topic/stentry     reference/propvaluehd ">Value</propvaluehd><propdeschd class="- topic/stentry     reference/propdeschd ">Description</propdeschd></prophead><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Enabled</proptype><propvalue class="- topic/stentry     reference/propvalue "><option class="+ topic/keyword pr-d/option ">true</option> or <option class="+ topic/keyword pr-d/option ">false</option> (defaults
to <option class="+ topic/keyword pr-d/option ">true</option>)</propvalue><propdesc class="- topic/stentry     reference/propdesc ">When false, no external requests will be made by the service
or its children.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Region</proptype><propvalue class="- topic/stentry     reference/propvalue ">drop-down menu</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Contains the list of AWS regions. Select the one in which
your AWS assets and services belong for this station or site.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Access Keys</proptype><propvalue class="- topic/stentry     reference/propvalue ">folder</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Holds references to AWS Access Keys.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Aws IoT</proptype><propvalue class="- topic/stentry     reference/propvalue ">additional properties</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Contains properties for setup and execution of tasks to
configure your AWS IoT service.</propdesc></property></properties></refbody></reference><reference id="AwsAccessKeyFolderawsUtils-AwsAcces-08A642A2--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Aws Access Key Folder (awsUtils-AwsAccessKeyFolder)</title><shortdesc class="- topic/shortdesc ">To utilize some of the capabilities of the AWS Service,
it is necessary to use an access key for authentication. These tasks
may typically be one-off configuration tasks during station commissioning.
Thus, by default access keys are only stored temporarily. This is
in line with best practice as access keys should only be stored as
long as you require them.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">awsUtils-AwsAccessKeyFolder</indexterm></keywords></metadata></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><p class="- topic/p ">AWS Access Keys are stored securely in a dedicated encrypted
key ring to which only the <apiname class="+ topic/keyword pr-d/apiname ">awsUtils</apiname> module code
has access. Keys are automatically purged from the key ring once their
storage time has elapsed.</p><p class="- topic/p ">To add an access key, invoke the <uicontrol class="+ topic/ph ui-d/uicontrol ">Add</uicontrol> action, paste the value in the <parmname class="+ topic/keyword pr-d/parmname ">Access Key
Id</parmname>, and select the period you wish for the station to securely
store the key value. It is best practice to only store the key for
the time in which it is required to configure the remote service in
AWS.</p><?Pub Caret 134?></section><section class="- topic/section "><title class="- topic/title ">Actions</title><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Add</b>: Adds a new AWS access
key</p><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Cleanup Purged Keys</b>: Forces removal of any access
keys that have passed their purge time.</p></section></refbody></reference><reference id="AwsStoredAccessKeyawsUtils-AwsStore-08AAD87B--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Aws Stored Access Key (awsUtils-AwsStoredAccessKey)</title><shortdesc class="- topic/shortdesc "><uicontrol class="+ topic/ph ui-d/uicontrol ">Aws Stored Access Key</uicontrol> represents
an AWS access key securely stored in a dedicated key ring.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">awsUtils-AwsStoredAccessKey</indexterm></keywords></metadata></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><?Pub Caret 0?><p class="- topic/p ">To add an access
key, invoke the <uicontrol class="+ topic/ph ui-d/uicontrol ">Add</uicontrol> action on the <uicontrol class="+ topic/ph ui-d/uicontrol ">Aws Access Key Folder</uicontrol>, paste the value in the <parmname class="+ topic/keyword pr-d/parmname ">Access Key Id</parmname>, and select the period you wish for <keyword class="- topic/keyword ">Workbench</keyword> to securely store the key value. It is best practice
to only store the key for the time in which it is required to configure
the remote service in AWS.</p><title class="- topic/title "/></section><properties class="- topic/simpletable reference/properties "><prophead class="- topic/sthead      reference/prophead "><proptypehd class="- topic/stentry     reference/proptypehd ">Property</proptypehd><propvaluehd class="- topic/stentry     reference/propvaluehd ">Value</propvaluehd><propdeschd class="- topic/stentry     reference/propdeschd ">Description</propdeschd></prophead><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Access Key Id</proptype><propvalue class="- topic/stentry     reference/propvalue ">read-only</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Displays the unique Id of the access key.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Stored</proptype><propvalue class="- topic/stentry     reference/propvalue ">read-only</propvalue><propdesc class="- topic/stentry     reference/propdesc ">If <option class="+ topic/keyword pr-d/option ">true</option>, the key is stored in the key ring.
If <option class="+ topic/keyword pr-d/option ">false</option>, the access key is purged.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Purge Date</proptype><propvalue class="- topic/stentry     reference/propvalue ">read-only</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Displays the date and time at which the key will be purged
from the key ring.</propdesc></property></properties></refbody></reference><reference id="AwsIoTawsUtils-AwsIoT-08B57865--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Aws IoT (awsUtils-AwsIoT)</title><shortdesc class="- topic/shortdesc ">Aws IoT is a component used to set up and execute tasks
for the configuration of your AWS IoT service.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">awsUtils-AwsIoT</indexterm></keywords></metadata></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><p class="- topic/p ">After configuring the child <uicontrol class="+ topic/ph ui-d/uicontrol ">Ca Provisioning
Params</uicontrol>, use the <uicontrol class="+ topic/ph ui-d/uicontrol ">Setup Just in Time Provisioning</uicontrol> action to execute a job to register a CA with AWS. The results of
the task are populated in the properties below. See <xref format="dita" scope="local" type="task" class="- topic/xref " file-uuid="270ba110-c787-11ee-be84-42010af00059" href="#RunningInstallAWSMQTTDeviceTask-07B10905--en">Running the AWS MQTT Provisioning Task</xref> for more details.</p><image otherprops="ax" width="700" class="- topic/image " href="46ea5930-c14d-11ee-be84-42010af00059.png" placement="inline"/></section><properties class="- topic/simpletable reference/properties "><prophead class="- topic/sthead      reference/prophead "><proptypehd class="- topic/stentry     reference/proptypehd ">Property</proptypehd><propvaluehd class="- topic/stentry     reference/propvaluehd ">Value</propvaluehd><propdeschd class="- topic/stentry     reference/propdeschd ">Description</propdeschd></prophead><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Ca Provisioning Params</proptype><propvalue class="- topic/stentry     reference/propvalue ">additional properties (see property table below)</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Contains various properties to configure the provisioning
job.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Provisioning Ca Cert Alias</proptype><propvalue class="- topic/stentry     reference/propvalue ">read-only</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Displays the alias of the CA certificate that was registered
with AWS.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Mqtt Data Endpoint</proptype><propvalue class="- topic/stentry     reference/propvalue ">read-only</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Displays the retrieved endpoint to which MQTT devices can
connect for this AWS account and region.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Provisioning Last Run</proptype><propvalue class="- topic/stentry     reference/propvalue ">read-only</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Displays the date and time at which the provisioning job
was last executed.</propdesc></property></properties><section class="- topic/section "><title class="- topic/title ">Actions</title><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Setup Just in Time Provisioning</b>: Executes a job to register a CA with AWS.</p></section><section class="- topic/section "><title class="- topic/title ">Ca Provisioning Params folder</title><image scale="85" width="700" class="- topic/image " href="47a0d7f0-c14d-11ee-be84-42010af00059.png" placement="inline"/></section><properties class="- topic/simpletable reference/properties "><prophead class="- topic/sthead      reference/prophead "><proptypehd class="- topic/stentry     reference/proptypehd ">Property</proptypehd><propvaluehd class="- topic/stentry     reference/propvaluehd ">Value</propvaluehd><propdeschd class="- topic/stentry     reference/propdeschd ">Description</propdeschd></prophead><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Access Key Id</proptype><propvalue class="- topic/stentry     reference/propvalue ">drop-down menu</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Selects the access key to use for authenticating with AWS.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Role Arn</proptype><propvalue class="- topic/stentry     reference/propvalue ">password</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Specifies the ARN string for the service role that has the
AWS <apiname class="+ topic/keyword pr-d/apiname ">AWSIoTThingsRegistration</apiname> permission.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Ca Certificate Source</proptype><propvalue class="- topic/stentry     reference/propvalue ">drop-down menu</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Selects to generate a new CA certificate; or use an existing
imported CA certificate.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Existing Niagara Cert Alias</proptype><propvalue class="- topic/stentry     reference/propvalue ">drop-down menu</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Specifies the alias of the existing imported CA certificate
if selected to be used.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Ca Certificate Password</proptype><propvalue class="- topic/stentry     reference/propvalue ">password</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Specifies the password to use for the existing CA certificate,
or password to use to secure the newly generated one.</propdesc><?Pub Caret 34?></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">New Ca Certificate Dn</proptype><propvalue class="- topic/stentry     reference/propvalue ">string</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Populates the <parmname class="+ topic/keyword pr-d/parmname ">Distinguished Name</parmname> attribute
list to use for a newly generated CA certificate. May optionally populate
only some of the fields. CN=,O=,OU=,L=,ST=,C=</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">New Ca Certificate Expiry Days</proptype><propvalue class="- topic/stentry     reference/propvalue ">days, hours, minutes (defaults to 730 days)</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Defines the validity period for a newly generated CA certificate.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Overwrites Certificates</proptype><propvalue class="- topic/stentry     reference/propvalue "><option class="+ topic/keyword pr-d/option ">true</option> or <option class="+ topic/keyword pr-d/option ">false</option> (defaults
to <option class="+ topic/keyword pr-d/option ">false</option>)</propvalue><propdesc class="- topic/stentry     reference/propdesc ">If <option class="+ topic/keyword pr-d/option ">true</option>, it will overwrite an existing
CA certificate in the Key Store when generating a new CA.</propdesc></property></properties></refbody></reference><reference id="AwsSigningProfileawsUtils-AwsSignin-08BB0465--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Aws Signing Profile (awsUtils-AwsSigningProfile)</title><?Pub Caret -2?><shortdesc class="- topic/shortdesc ">This component is an AWS-specific Signing Profile against
which device certificates can be signed.</shortdesc><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">awsUtils-AwsSigningProfile</indexterm></keywords></metadata></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><p class="- topic/p ">To use the <uicontrol class="+ topic/ph ui-d/uicontrol ">AWS Signing Profile</uicontrol>,
drag it from the <apiname class="+ topic/keyword pr-d/apiname ">awsUtils</apiname> palette to the <menucascade class="+ topic/ph ui-d/menucascade "><uicontrol class="+ topic/ph ui-d/uicontrol ">Signing Service</uicontrol><uicontrol class="+ topic/ph ui-d/uicontrol ">Profiles</uicontrol></menucascade> folder, and populate the <parmname class="+ topic/keyword pr-d/parmname ">CommonName</parmname> and <parmname class="+ topic/keyword pr-d/parmname ">Country</parmname> settings to define the certificate
distinguished name fields. You can further customize the profile by
adding <uicontrol class="+ topic/ph ui-d/uicontrol ">CertificateParameters</uicontrol> from the <apiname class="+ topic/keyword pr-d/apiname ">Signing Service</apiname> palette. For more details, see “Signing
Service” in <ph class="- topic/ph ">Niagara Signing Service Guide</ph>.</p><image placement="break" width="700" class="- topic/image " href="46eb1c80-c14d-11ee-be84-42010af00059.png"/></section><properties class="- topic/simpletable reference/properties "><prophead class="- topic/sthead      reference/prophead "><proptypehd class="- topic/stentry     reference/proptypehd ">Property</proptypehd><propvaluehd class="- topic/stentry     reference/propvaluehd ">Value</propvaluehd><propdeschd class="- topic/stentry     reference/propdeschd ">Description</propdeschd></prophead><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Common Name</proptype><propvalue class="- topic/stentry     reference/propvalue ">additional properties</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Contains properties that you can use to optionally generate
a unique certificate Common Name for each device.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Country</proptype><propvalue class="- topic/stentry     reference/propvalue ">additional properties</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Contains the properties to define the Certificate Dn Field
Parameter.</propdesc></property></properties></refbody></reference><reference id="AwsJitpMqttAuthenticatorabstractMqt-061BB575--en" xml:lang="en" class="- topic/topic       reference/reference "><title class="- topic/title ">Aws Jitp Mqtt Authenticator (abstractMqttDriver-AwsJitpMqttAuthenticator)</title><shortdesc class="- topic/shortdesc ">The <uicontrol class="+ topic/ph ui-d/uicontrol ">Aws Jitp Mqtt Authenticator</uicontrol> component
connects to Amazon Web Services (AWS) utilizing the <uicontrol class="+ topic/ph ui-d/uicontrol ">Just
In Time Provisioning</uicontrol> (JITP) functionality as configured
in the <apiname class="+ topic/keyword pr-d/apiname ">awsUtils</apiname> module. See “<cite class="- topic/cite ">Configuring
Just In Time Provisioning</cite>” in the “<ph class="- topic/ph ">Niagara AWS Utils Guide</ph>” for more details.</shortdesc><?Pub Caret 241?><prolog class="- topic/prolog "><metadata class="- topic/metadata "><keywords class="- topic/keywords "><indexterm class="- topic/indexterm ">abstractMqttDriver-AwsJitpMqttAuthenticator</indexterm><indexterm class="- topic/indexterm ">components</indexterm></keywords></metadata></prolog><refbody class="- topic/body        reference/refbody "><section class="- topic/section "><p class="- topic/p "><uicontrol class="+ topic/ph ui-d/uicontrol ">Just In Time Provisioning</uicontrol> allows
a fleet of devices to automatically connect to AWS with auto-generated
certificates as means of authentication. The major difference to the
existing AWS MQTT authenticator is that the JITP authenticator does
not require an AWS user to manually configure the device in AWS IoT,
or to generate and sign their device certificate. This is performed
in conjunction with the Signing Service, which automatically supplies
signing certificates to each authenticator. In addition, certificates
are also renewed without any user intervention required. For more
information, see “<cite class="- topic/cite ">Signing Service</cite>” in the “<ph class="- topic/ph ">Niagara Signing Service Guide</ph>”.</p><p class="- topic/p "><image placement="break" width="500" class="- topic/image " href="46e85d60-c14d-11ee-be84-42010af00059.png"/><fig class="- topic/fig " id="2cc53548-7fbf-45fa-83ae-bb51f465b585"><title class="- topic/title ">Aws Jitp Mqtt Authenticator properties</title><image class="- topic/image " href="46e8ab80-c14d-11ee-be84-42010af00059.png" placement="inline"/></fig></p></section><properties class="- topic/simpletable reference/properties "><prophead class="- topic/sthead      reference/prophead "><proptypehd class="- topic/stentry     reference/proptypehd ">Property</proptypehd><propvaluehd class="- topic/stentry     reference/propvaluehd ">Value</propvaluehd><propdeschd class="- topic/stentry     reference/propdeschd ">Description</propdeschd></prophead><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Broker Endpoint</proptype><propvalue class="- topic/stentry     reference/propvalue ">string</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Defines the broker endpoint with your AWS IoT service endpoint.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Client ID</proptype><propvalue class="- topic/stentry     reference/propvalue ">read-only</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Automatically populated when the signed certificate is retrieved
from the Signing Service. The value will match the Common Name of
the certificate.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Broker Port</proptype><propvalue class="- topic/stentry     reference/propvalue ">numeric value [0–100000]</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Automatically set to the AWS default port 8883.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Callback Router</proptype><propvalue class="- topic/stentry     reference/propvalue ">additional properties</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Specifies <uicontrol class="+ topic/ph ui-d/uicontrol ">Callback Type</uicontrol> and <uicontrol class="+ topic/ph ui-d/uicontrol ">Point Callback Handler</uicontrol>.</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Certificate Alias and Password</proptype><propvalue class="- topic/stentry     reference/propvalue ">additional properties</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Specifies alias and password for the certificate used to
authenticate with AWS. Alias is automatically generated in the format
‘aws_deviceName’</propdesc></property><property class="- topic/strow       reference/property "><proptype class="- topic/stentry     reference/proptype ">Cert Requester</proptype><propvalue class="- topic/stentry     reference/propvalue ">additional properties</propvalue><propdesc class="- topic/stentry     reference/propdesc ">Contains components that submit a CSR to the <keyword class="- topic/keyword ">Supervisor</keyword> Signing Service and obtain the signed certificate
to install in the <wintitle class="+ topic/keyword ui-d/wintitle ">User Key Store</wintitle>.</propdesc></property></properties><section class="- topic/section "><title class="- topic/title ">Automatic install</title><p class="- topic/p ">To use this authenticator,
you can automatically install an MQTT device on each <keyword class="- topic/keyword ">Niagara</keyword> station in your network using a <keyword class="- topic/keyword ">Niagara</keyword> provisioning task from a <keyword class="- topic/keyword ">Supervisor</keyword> station. As the device is added to the station,
it will automatically onboard with the Signing Service, obtain a signed
device certificate and connect to AWS. For more information, see “Running
Install AWS MQTT Device task” in the “<ph class="- topic/ph ">Niagara AWS Utils Guide</ph>.</p></section><section class="- topic/section "><title class="- topic/title ">Manual install</title><p class="- topic/p ">You can also manually install
a single device by dragging the <uicontrol class="+ topic/ph ui-d/uicontrol ">AwsJitpMqttDevice</uicontrol> component from the <apiname class="+ topic/keyword pr-d/apiname ">abstractMqttDriver</apiname> palette under the <uicontrol class="+ topic/ph ui-d/uicontrol ">Devices</uicontrol> folder.</p><p class="- topic/p "><ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">Populate the broker endpoint with your AWS IoT service endpoint
and change the port if different from the AWS default.</p></li><li class="- topic/li "><p class="- topic/p "><parmname class="+ topic/keyword pr-d/parmname ">Certificate Alias</parmname> will be populated automatically.
We recommend that you enter a password to protect your device certificate
in the <keyword class="- topic/keyword ">Niagara</keyword> <wintitle class="+ topic/keyword ui-d/wintitle ">User Key Store</wintitle>.</p></li><li class="- topic/li "><p class="- topic/p ">On <parmname class="+ topic/keyword pr-d/parmname ">Cert Requester</parmname>, invoke the <uicontrol class="+ topic/ph ui-d/uicontrol ">Onboard</uicontrol> action and expand this component to monitor progress.
An admin user will need to approve the onboarding request in the <keyword class="- topic/keyword ">Supervisor</keyword>. For more details, see “<cite class="- topic/cite ">Signing Service</cite>” in the “<ph class="- topic/ph ">Niagara Signing Service Guide</ph>”.</p></li></ul></p></section></refbody></reference></reference></reference><concept id="concept-7242--en" xml:lang="en-us" class="- topic/topic concept/concept "><title class="- topic/title ">Glossary</title><shortdesc class="- topic/shortdesc ">The following glossary entries relate specifically to the topics that are included as part of this document.</shortdesc><prolog class="- topic/prolog "><author translate="no" type="creator" class="- topic/author ">Mike McGinnis &lt;mmcginnis@tridium.com&gt;</author><metadata class="- topic/metadata "><keywords class="- topic/keywords "/></metadata></prolog><conbody class="- topic/body  concept/conbody "><p class="- topic/p ">To find more glossary terms and definitions refer to  glossaries in other individual documents.</p><section class="- topic/section "><title class="- topic/title ">Alphabetical listing</title><p class="- topic/p "/></section></conbody><glossentry id="AccessKey-09388ABC--en" xml:lang="en" class="- topic/topic concept/concept glossentry/glossentry ">
<glossterm class="- topic/title concept/title glossentry/glossterm ">Access Key</glossterm>
<glossdef class="- topic/abstract concept/abstract glossentry/glossdef ">A secret credential string that identifies an AWS (Amazon
Web Services) account and provides access to its services.</glossdef><?Pub Caret 72?>
</glossentry><glossentry id="AccessKeyId-0938F119--en" xml:lang="en" class="- topic/topic concept/concept glossentry/glossentry ">
<glossterm class="- topic/title concept/title glossentry/glossterm ">Access Key Id</glossterm>
<glossdef class="- topic/abstract concept/abstract glossentry/glossdef ">A unique string that identifies a particular access key.</glossdef><?Pub Caret -1?>
</glossentry><glossentry id="AmazonResourceNameARN-09397C8B--en" xml:lang="en" class="- topic/topic concept/concept glossentry/glossentry ">
<glossterm class="- topic/title concept/title glossentry/glossterm ">Amazon Resource Name (ARN)</glossterm>
<glossdef class="- topic/abstract concept/abstract glossentry/glossdef ">A unique identifier of AWS resources. It is required to
specify a resource unambiguously across Amazon Web Services (AWS).</glossdef><?Pub Caret 53?>
</glossentry><glossentry id="AmazonWebServicesAWS-09376B19--en" xml:lang="en" class="- topic/topic concept/concept glossentry/glossentry ">
<glossterm class="- topic/title concept/title glossentry/glossterm ">Amazon Web Services (AWS)</glossterm>
<glossdef class="- topic/abstract concept/abstract glossentry/glossdef ">Cloud computing services offered by the <cite class="- topic/cite ">Amazon Web
Services</cite> company.</glossdef><?Pub Caret 61?>
</glossentry><glossentry id="AWSIoT-0937D79C--en" xml:lang="en" class="- topic/topic concept/concept glossentry/glossentry ">
<glossterm class="- topic/title concept/title glossentry/glossterm ">AWS IoT</glossterm>
<glossdef class="- topic/abstract concept/abstract glossentry/glossdef ">The Internet of Things service within <cite class="- topic/cite ">Amazon Web Services</cite> (AWS) that offers the ability to connect to and manage remote devices
via MQTT.</glossdef>
</glossentry><glossentry id="JustInTimeProvisioningJITP-0D37B3CB--en" xml:lang="en" class="- topic/topic concept/concept glossentry/glossentry ">
<glossterm class="- topic/title concept/title glossentry/glossterm ">Just In Time Provisioning (JITP)</glossterm>
<glossdef class="- topic/abstract concept/abstract glossentry/glossdef ">The ability to provision your devices within AWS IoT at
the time of first connection, thereby eliminating many manual configuration
tasks.</glossdef><?Pub Caret 44?>
</glossentry></concept></normalized>